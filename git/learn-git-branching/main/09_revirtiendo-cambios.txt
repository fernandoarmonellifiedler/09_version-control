Revirtiendo cambios en git

Hay varias maneras de revertir cambios en git. Y, tal como al commitear, revertir cambios en git tiene tanto un componente de bajo nivel (indexar archivos o fragmentos individualmente) como un componente de alto nivel (cómo son efectivamente revertidos los cambios). Nuestra aplicación se va a concentrar en esto último.

Hay dos formas principales de deshacer cambios en git -- uno es usando git reset y el otro es usando git revert. Vamos a ver cada uno de esos a continuación

==================================
Git Reset

git reset revierte los cambios moviendo la referencia de una rama hacia atrás en el tiempo a un commit anterior. En este sentido podés pensarlo como "reescribir la historia". git reset va a mover la rama hacia atrás, como si el commit nunca se hubiera hecho.

Veamos cómo es eso:

git reset HEAD~1

git simplemente movió la referencia de la rama main atrás hacia C1. Ahora tu repositorio local está en un estado como si C2 nunca hubiera ocurrido.

==================================
Git Revert

Mientras que resetear los cambios funciona genial para ramas locales en tu máquina, su método de "reescribir la historia" no funciona para ramas remotas que otros están usando.

Para revertir cambios y compartir esa revertida con otros, necesitamos usar git revert. Veámoslo en acción

git revert HEAD

Extraño. Hay un nuevo commit aplicado sobre el que queríamos revertir. Eso es porque este nuevo commit C2' introduce cambios - sólo que esos cambios son exactamente los necesarios para revertir los que introdujo C2.

Cuando usás revert, podés pushear ese cambio para compartirlo con otros.

==================================
Para completar este nivel, revertí el commit más reciente, tanto en local como en pushed.

Tené en cuenta que pushed es una rama remota y local es una rama local -- eso debería ayudarte a elegir qué métodos usar.

git reset local^
git checkout pushed
git revert pushed
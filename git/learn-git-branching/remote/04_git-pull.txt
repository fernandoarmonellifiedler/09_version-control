Git Pull

Ahora que vimos cómo traer datos de un repositorio remoto con git fetch, ¡actualicemos nuestro trabajo local para reflejar esos cambios!

Realmente hay varias formas de hacer esto: una vez que tenés los commits disponibles localmente, podés integrarlos como si fueran commits comunes de otras ramas. Esto significa que podrías ejecutar comandos como:

    git cherry-pick o/main
    git rebase o/main
    git merge o/main
    etc., etc.

De hecho, el flujo de trabajo de fetchear cambios remotos y después mergearlos es tan común que git incluye un comando que hace ambas cosas de una: ¡git pull!

==================================
Veamos primero un fetch y un merge ejecutados secuencialmente.

git fetch
git merge origin/main

Boom: descargamos C3 con un fetch y luego lo mergeamos con git merge o/main. Ahora nuestra rama main refleja el nuevo trabajo del remoto (en este caso, llamado origin)


¿Qué pasaría si usáramos git pull en cambio?

¡Lo mismo! Eso debería dejar bien en claro que git pull es básicamente un atajo para hacer git fetch seguido por un merge con la rama que sea que hayamos bajado.

==================================
Exploraremos los detalles de git pull después (incluyendo sus opciones y parámetros), pero por ahora probémoslo en este nivel.

Acordate: podés resolver este comando simplemente con fetch y merge, pero eso te costaría un comando extra :P

==================================
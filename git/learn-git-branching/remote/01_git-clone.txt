Git Remotes

Los repositorios remotos no son tan complicados. En el mundo actual de la computación en la nube es bastante facil pensar que hay un montón de magia detrás de los remotes de git, pero en realidad sólo son copias de tu repositorio en otra computadora. Típicamente vas a hablar con esta otra computadora a través de Internet, lo que permite transferir commits de un lado a otro.

Habiendo dicho eso, los repositorios remotos tienen un par de propiedades copadas:

    Primero y principal, los remotos ¡son un genial backup! Los repositorios locales de git tienen la habilidad de restaurar archivos a un estado previo (como ya sabés), pero toda esa información está almacenada localmente. Al tener copias de tu repositorio git en otras computadoras, podés perder todos tus datos locales y aún así retomar de donde habías dejado.

    Más importante, ¡los remotos sociabilizan la programación! Ahora que hay una copia de tu proyecto hosteada en otro lugar, tus amigos pueden contribuir a tu proyecto (o bajarse los últimos cambios) de un modo muy sencillo.

Se volvió bastante popular el uso de sitios web que muestran la actividad de los repositorios (como GitHub o Phabricator), pero esos repositorios remotos siempre sirven como la base subyacente de esas herramientas. Así que ¡es importante entenderlos!

==================================
Nuestro comando para crear remotos

Hasta este punto, Learn Git Branching se centró en enseñar las bases del trabajo local con repositorios (branchear, mergear, rebasear, etc). Sin embargo, ahora que queremos aprender sobre el trabajo con repositorios remotos, necesitamos un comando para inicializar nuestro entorno para esas lecciones. Ese comando será git clone

Técnicamente, git clone en el mundo real es el comando que usarías para crear copias locales de un repositorio remoto (uno de GitHub, por ejemplo). Acá usamos este comando de un modo un tanto distinto, en cambio -- git clone va a crear un repositorio remoto a partir del tuyo local. Estamos de acuerdo en que es el significado técnicamente opuesto al del comando real, pero ayuda bastante a entender la conexión entre el clonado y el trabajo en un repositorio remoto, así que vamos a vivir con ello por ahora.

==================================
Comencemos despacio y simplemente veamos cómo se ve un repositorio remoto en nuestra visualización.

git clone

¡Ahí está! Ahora tenemos un repositorio remoto de nuestro proyecto. Parece bastante similar, salvando algunos cambios visuales para hacer evidente la distinción -- en niveles posteriores vas a ver cómo compartir trabajo entre estos repositorios.

==================================
Para completar este nivel, simplemente hacé git clone de tu repositorio existente. El verdadero aprendizaje viene en las próximas lecciones.

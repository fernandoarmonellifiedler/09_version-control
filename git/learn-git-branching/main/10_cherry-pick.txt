Moviendo el trabajo por ahí

Hasta ahora cubrimos lo básico de git -- commitear, branchear, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.

El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo allá y este otro allá" de una manera precisa, elocuente y flexible.

Puede parecer un montón, pero es un concepto bastante simple.

==================================
Git Cherry-pick

El primer comando en esta serie se llama git cherry-pick. Tiene la siguiente forma:

git cherry-pick <Commit1> <Commit2> <...>

Es una manera bastante directa de decir que querés copiar una serie de commits sobre tu ubicación actual (HEAD). Personalmente amo cherry-pick porque hay muy poca magia involucrada y es bastante simple de entender.

¡Veamos una demo!

Acá tenemos un repositorio con algo de trabajo en la rama side que queremos copiar a main. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick.

git cherry-pick c2 c4

¡Eso es todo! Queríamos los commits C2 y C4 y git los aplicó justo donde estábamos. ¡Tan simple como eso!

==================================
Para completar este nivel, simplemente copiá algo de trabajo desde otras tres ramas a main. Podés ver qué commits queremos en la visualización del objetivo.

git cherry-pick c3 c4 c7
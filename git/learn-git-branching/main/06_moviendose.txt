Moviéndose por ahí con Git

Antes de meternos en algunas de las funcionalidades más avanzadas de git, es importante entender las distintas maneras de moverse por el árbol de commits que representa tu proyecto.

Una vez que estés cómodo moviendote por ahí, tus poderes con los otros comandos de git ¡van a amplificarse!

==================================
HEAD

Primero tenemos que hablar de "HEAD". HEAD es el nombre simbólico del commit actualmente checkouteado -- es, básicamente, el commit sobre el que estás trabajando.

HEAD siempre apunta al commit más reciente, reflejado en el árbol de commits. La mayoría de los comandos de git que hacen cambios al árbol de commits empiezan modificando HEAD.

Normalmente HEAD apunta al nombre de una rama (como bugFix). Cuando commiteás, el estado de bugFix se altera y este cambio es visible a través de HEAD.

==================================
Veámoslo en acción. Acá vamos a ver a HEAD antes y después de un commit.

git checkout C1
git checkout modificando
git commit
git checkout C2

¡Ves! HEAD estuvo oculta bajo nuestra rama main todo este tiempo.

==================================
Detacheando HEAD

Detachear (des-adjuntar) HEAD simplemente significa adjuntarla a un commit en lugar de a un branch. Así es como se ve de antemano:

HEAD -> main -> C1

git checkout C1

Y así queda ahora:

HEAD -> C1

==================================
Para completar este nivel, detacheemos HEAD de bugFix y atacheemosla al commit, en cambio.

Especificá este commit por su hash. El hash de cada commit se muestra en el círculo que lo representa.

git checkout c4
Trabajo divergente

Hasta acá vimos cómo pullear commits de otros y cómo pushear los nuestros. Parece bastante simple, así que ¿cómo puede confundirse tanto la gente?

La dificultad viene cuando la historia de los repositorios diverge. Antes de entrar en detalles, veamos un ejemplo...

==================================
Imaginate que clonás un repositorio el lunes y empezás a desarrollar algo. Para el viernes ya estás listo para publicar tu trabajo, pero, ¡oh, oh! Tus colegas también escribieron código durante la semana, haciendo que tu trabajo quede desactualizado (y obsoleto). Además, ellos publicaron esos commits en el repositorio remoto, así que ahora tu trabajo está basado en una versión vieja del proyecto, que ya no le interesa a nadie.

En este caso, el comando git push es ambiguo. Si corrés git push, ¿git debería cambiar el repositorio a como estaba el lunes? ¿Debería tratar de agregar tu código sin eliminar el código nuevo? ¿O debería ignorar completamente tus cambios porque están desactualizados?

Como hay tanta ambiguedad en esta situación (en que la historia divirgió), git no te permite pushear tus cambios. En cambio, te fuerza a integrar el último estado del repositorio remoto antes de poder compartir tu trabajo.

==================================
Demasiada charla, veámoslo en acción!

git push

¿Ves? No pasó nada, porque el comando falla. git push falla porque C3, tu commit más reciente, está basado en el remoto sobre C1. El remoto fue actualizado a C2 desde entonces, por lo que git rechaza tu push

==================================
¿Cómo resolvés esta situación? Es fácil, todo lo que tenés que hacer es basar tu trabajo en la versión más reciente de la rama remota.

Hay un par de maneras de hacer esto, pero la más simple es mover tu trabajo haciendo un rebase. Probémoslo a ver cómo se ve.

Ahora, si mejor rebaseamos antes de pushear...

git fetch
git rebase origin/main
git push

¡Boom! Actualizamos nuestra representación local del remoto con git fetch, rebaseamos nuestro trabajo para reflejar los nuevos cambios del remoto, y después los pusheamos con git push.

==================================
¿Hay otra manera de actualizar mi trabajo si actualizaron el repositorio remoto? ¡Claro que sí! Veamos cómo hacer lo mismo pero usando merge.

Por más que git merge no mueva tu trabajo (sólo crea un commit de merge), es un modo de decirle a git que integraste todos los cambios del remoto. Esto es porque ahora una rama remota pasó a ser un ancestro de tu propia rama, lo que significa que tu commit refleja los cambios de todos los commits de la rama remota.

Veamos una muestra...

Si en lugar de rebasear hacemos un merge...

git fetch
git merge origin/main
git push

¡Boom! Actualizamos nuestra representación local del remoto usando git fetch, mergeamos el nuevo trabajo junto con el nuestro (para reflejar los nuevos cambios en el remoto), y después los pusheamos usando git push.

==================================
¡Asombroso! ¿Hay forma de hacer esto sin tipear tantos comandos?

¡Claro que sí! Ya sabés que git pull es simplemente un atajo para hacer fetch y merge. Convenientemente, ¡git pull --rebase es un atajo para hacer fetch y rebase!

Veamos estos atajos funcionando.

Primero con --rebase...

git pull --rebase
git push

¡Igual que antes! Sólo que bastante más corto.


Y ahora un pull común

git pull
git push

Otra vez, ¡exactamente lo mismo que antes!

==================================
Toda esta movida de fetchear, rebasear/mergear y pushear es bastante común. En lecciones futuras vamos a ver formas más complejas de estos flujos de trabajo, pero por ahora probemos esto que vimos.

Para resolver este nivel, hacé lo siguiente:

    Cloná tu repositorio
    Simulá algo de trabajo de un colega (1 commit)
    Commiteá algo de trabajo propio (1 commit)
    Publicá tu trabajo rebaseando


